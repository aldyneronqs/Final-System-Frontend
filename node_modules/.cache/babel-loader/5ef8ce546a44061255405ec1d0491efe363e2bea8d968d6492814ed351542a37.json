{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\Finals in Mobile and Web Development\\\\SYSTEM-CLIENT-main\\\\SYSTEM-CLIENT-main\\\\src\\\\UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext({\n  user: {\n    id: null,\n    isAdmin: null,\n    contactNumber: null\n  },\n  // Initialize with default values\n  setUser: () => {},\n  unsetUser: () => {}\n});\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState({\n    id: null,\n    isAdmin: null,\n    contactNumber: null\n  });\n\n  // Fetch user data on component mount\n  useEffect(() => {\n    // Check if there's a token, then fetch the user data\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetch(\"http://localhost:4000/api/user-profile\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => response.json()).then(data => {\n        if (data.code === \"USER-FOUND\") {\n          setUser(data.result); // Set the fetched user data\n        }\n      }).catch(error => {\n        console.error(\"Error fetching user profile:\", error);\n      });\n    }\n  }, []); // Only fetch once when the component mounts\n\n  // Function to unset user\n  const unsetUser = () => {\n    setUser({\n      id: null,\n      isAdmin: null,\n      contactNumber: null\n    });\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      unsetUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"tqHInUlOnQurflF+guf1/Y6O9t4=\");\n_c = UserProvider;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserContext","createContext","user","id","isAdmin","contactNumber","setUser","unsetUser","UserProvider","children","_s","token","localStorage","getItem","fetch","method","headers","Authorization","then","response","json","data","code","result","catch","error","console","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/admin/Downloads/Finals in Mobile and Web Development/SYSTEM-CLIENT-main/SYSTEM-CLIENT-main/src/UserContext.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Create context\r\nconst UserContext = React.createContext({\r\n  user: { id: null, isAdmin: null, contactNumber: null }, // Initialize with default values\r\n  setUser: () => {},\r\n  unsetUser: () => {},\r\n});\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState({ id: null, isAdmin: null, contactNumber: null });\r\n\r\n  // Fetch user data on component mount\r\n  useEffect(() => {\r\n    // Check if there's a token, then fetch the user data\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      fetch(\"http://localhost:4000/api/user-profile\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.code === \"USER-FOUND\") {\r\n            setUser(data.result); // Set the fetched user data\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching user profile:\", error);\r\n        });\r\n    }\r\n  }, []); // Only fetch once when the component mounts\r\n\r\n  // Function to unset user\r\n  const unsetUser = () => {\r\n    setUser({ id: null, isAdmin: null, contactNumber: null });\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser, unsetUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAa,CAAC;EACtCC,IAAI,EAAE;IAAEC,EAAE,EAAE,IAAI;IAAEC,OAAO,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK,CAAC;EAAE;EACxDC,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAC;EACjBC,SAAS,EAAEA,CAAA,KAAM,CAAC;AACpB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACR,IAAI,EAAEI,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAAEO,EAAE,EAAE,IAAI;IAAEC,OAAO,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK,CAAC,CAAC;;EAElF;EACAR,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTG,KAAK,CAAC,wCAAwC,EAAE;QAC9CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,KAAK;QAChC;MACF,CAAC,CAAC,CACCO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACd,IAAIA,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;UAC9BhB,OAAO,CAACe,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;QACxB;MACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMlB,SAAS,GAAGA,CAAA,KAAM;IACtBD,OAAO,CAAC;MAAEH,EAAE,EAAE,IAAI;MAAEC,OAAO,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;IACzDO,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,oBACE5B,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,IAAI;MAAEI,OAAO;MAAEC;IAAU,CAAE;IAAAE,QAAA,EACvDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,EAAA,CArCWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAuCzB,eAAeR,WAAW;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}